Q1.#function for nth fabonacci number
#1+1=2 1+2=3 3+5=8
fabon=int(int(input("number of terms:")))
n1,n2=0,1
count=0
if fabon<=0:
   print("please enter a positive integer")
   #if 1 term then the code will return 1
elif fabon==1:
   print("sequence upto", fabon, ":")
   print (n1)
else:
    print ("Fabonacci sequence:")
    while count<fabon:
      print(n1)
      nth=n1+n2
#values updated
      n1=n2
      n2=nth
      count+=1
#THIS WAS RUN BY MEDHA VAID
#SAPID:500107848
Q2. # Python program to check whether it is possible to make
# string palindrome by removing one character
 
# Utility method to check if substring from
# low to high is palindrome or not.
def isPalindrome(string: str, low: int, high: int) -> bool:
    while low < high:
        if string[low] != string[high]:
            return False
        low += 1
        high -= 1
    return True
 
# This method returns -1 if it
# is not possible to make string
# a palindrome. It returns -2 if
# string is already a palindrome.
# Otherwise it returns index of
# character whose removal can
# make the whole string palindrome.
def possiblepalinByRemovingOneChar(string: str) -> int:
 
    # Initialize low and right by
    # both the ends of the string
    low = 0
    high = len(string) - 1
 
    # loop until low and high cross each other
    while low < high:
 
        # If both characters are equal then
        # move both pointer towards end
        if string[low] == string[high]:
            low += 1
            high -= 1
        else:
 
            # If removing str[low] makes the whole string palindrome.
            # We basically check if substring str[low+1..high] is
            # palindrome or not.
            if isPalindrome(string, low + 1, high):
                return low
 
            # If removing str[high] makes the whole string palindrome
            # We basically check if substring str[low+1..high] is
            # palindrome or not
            if isPalindrome(string, low, high - 1):
                return high
            return -1
 
    # We reach here when complete string will be palindrome
    # if complete string is palindrome then return mid character
    return -2
 
# Driver Code
if __name__ == "__main__":
 
    string = "abecbea"
    idx = possiblepalinByRemovingOneChar(string)
 
    if idx == -1:
        print("Not possible")
    elif idx == -2:
        print("Possible without removing any character")
    else:
        print("Possible by removing character at index", idx)
#THIS CODE WAS RUN BY MEDHA VAID
#SAPID:500107848

Q3.#make a list l1 and add the elements
l1=[1,4,6]
#make a list l2 and add the elements 
l2=[2,3,5]
#list 3 will include the elements of both l1 and l2
l3=l1+l2
#sort function to print the output in a sequence 
m=sorted(l3)
#sorted list will be printed
print(m)
#code is run by Medha Vaid 

Q4.# Python program to implement Morse Code Translator
 
'''
VARIABLE KEY
'cipher' -> 'stores the morse translated form of the english string'
'decipher' -> 'stores the english translated form of the morse string'
'citext' -> 'stores morse code of a single character'
'i' -> 'keeps count of the spaces between morse characters'
'message' -> 'stores the string to be encoded or decoded'
'''
 
# Dictionary representing the morse code chart
MORSE_CODE_DICT = { 'A':'.-', 'B':'-...',
                    'C':'-.-.', 'D':'-..', 'E':'.',
                    'F':'..-.', 'G':'--.', 'H':'....',
                    'I':'..', 'J':'.---', 'K':'-.-',
                    'L':'.-..', 'M':'--', 'N':'-.',
                    'O':'---', 'P':'.--.', 'Q':'--.-',
                    'R':'.-.', 'S':'...', 'T':'-',
                    'U':'..-', 'V':'...-', 'W':'.--',
                    'X':'-..-', 'Y':'-.--', 'Z':'--..',
                    '1':'.----', '2':'..---', '3':'...--',
                    '4':'....-', '5':'.....', '6':'-....',
                    '7':'--...', '8':'---..', '9':'----.',
                    '0':'-----', ', ':'--..--', '.':'.-.-.-',
                    '?':'..--..', '/':'-..-.', '-':'-....-',
                    '(':'-.--.', ')':'-.--.-'}
 
# Function to encrypt the string
# according to the morse code chart
def encrypt(message):
    cipher = ''
    for letter in message:
        if letter != ' ':
 
            # Looks up the dictionary and adds the
            # corresponding morse code
            # along with a space to separate
            # morse codes for different characters
            cipher += MORSE_CODE_DICT[letter] + ' '
        else:
            # 1 space indicates different characters
            # and 2 indicates different words
            cipher += ' '
 
    return cipher
 
# Function to decrypt the string
# from morse to english
def decrypt(message):
 
    # extra space added at the end to access the
    # last morse code
    message += ' '
 
    decipher = ''
    citext = ''
    for letter in message:
 
        # checks for space
        if (letter != ' '):
 
            # counter to keep track of space
            i = 0
 
            # storing morse code of a single character
            citext += letter
 
        # in case of space
        else:
            # if i = 1 that indicates a new character
            i += 1
 
            # if i = 2 that indicates a new word
            if i == 2 :
 
                 # adding space to separate words
                decipher += ' '
            else:
 
                # accessing the keys using their values (reverse of encryption)
                decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT
                .values()).index(citext)]
                citext = ''
 
    return decipher
 
# Hard-coded driver function to run the program
def main():
    message = "PYTHON"
    result = encrypt(message.upper())
    print (result)
 
    message = ".--. -.-- - .... --- -."
    result = decrypt(message)
    print (result)
 
# Executes the main function
if __name__ == '__main__':
    main()
#THIS CODE WAS RUN BY MEDHA VAID 
#SAP ID - 500107848


Q5.#code for printing list of strin in a rectangle frame of *
#words should be enclosed
p=input("words:")
def frame(words):
    size = len(max(words, key=len))
#length of words
    print('*' * (size + 4))
    for word in words:
        print('* {a:<{b}} *'.format(a=word, b=size))
    print('*' * (size + 4))
frame(p.split(" "))
#code was run by medha vaid

Q6.def enumerate_moves(x, y):

    potential_moves = []     # moves before clean up function

# ------------------------------------------------------------------------------
    # resolve pawn moves. 4 possible moves maximally
    if board[x][y] == "bPawn":

        potential_moves.append([[x+1], [y]])

        # if the pawn is in the second rank (has not moved)
        try:
            if board[x+2][y] == "" and x == 1 and board[x+1][y] == "":
                potential_moves.append([[x+2], [y]])
        except IndexError:
            pass

        try:
            if board[x+1][y+1][0] == "w":
                potential_moves.append([x+1], [y+1])
        except IndexError:
            pass

        try:
            if board[x+1][y-1][0] == "w":
                potential_moves.append([x+1], [y-1])
        except IndexError:
            pass

# ------------------------------------------------------------------------------

    # resolve knight moves. 8 possible moves maximally
    elif board[x][y] == "bKnight":

        potential_moves.append([[x+2], [y+1]])
        potential_moves.append([[x+2], [y-1]])
        potential_moves.append([[x+1], [y+2]])
        potential_moves.append([[x+1], [y+2]])
        potential_moves.append([[x-2], [y-1]])
        potential_moves.append([[x-2], [y+1]])
        potential_moves.append([[x-1], [y+2]])
        potential_moves.append([[x-1], [y-2]])

# ------------------------------------------------------------------------------

    elif board[x][y] == "bBishop":

        # down and right
        a = x + 1
        b = y + 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a+1][b+1][0] == "w":
                    potential_moves.append([[a+1], [b+1]])
            except IndexError:
                pass
            a += 1
            b += 1

        # down and left
        a = x + 1
        b = y - 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a+1][b-1][0] == "w":
                    potential_moves.append([[a+1], [b-1]])
            except IndexError:
                pass
            a += 1
            b -= 1

        # up and right
        a = x - 1
        b = y + 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a-1][b+1][0] == "w":
                    potential_moves.append([[a-1], [b+1]])
            except IndexError:
                pass
            a -= 1
            b += 1

        # up and left
        a = x - 1
        b = y - 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a-1][b-1][0] == "w":
                    potential_moves.append([[a-1], [b-1]])
            except IndexError:
                pass
            a -= 1
            b -= 1

# ------------------------------------------------------------------------------

    elif board[x][y] == "bRook":
        # down
        a = x + 1
        b = y
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a+1][b][0] == "w":
                    potential_moves.append([[a+1], [b]])
            except IndexError:
                pass
            a += 1

        # left
        a = x
        b = y - 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a][b-1][0] == "w":
                    potential_moves.append([[a], [b-1]])
            except IndexError:
                pass
            b -= 1

        # up
        a = x - 1
        b = y
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a-1][b][0] == "w":
                    potential_moves.append([[a-1], [b]])
            except IndexError:
                pass
            a -= 1

        # right
        a = x
        b = y + 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a][b+1][0] == "w":
                    potential_moves.append([[a], [b+1]])
            except IndexError:
                pass
            b += 1

# ------------------------------------------------------------------------------

    elif board[x][y] == "bQueen":
        # down and right
        a = x + 1
        b = y + 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a+1][b+1][0] == "w":
                    potential_moves.append([[a+1], [b+1]])
            except IndexError:
                pass
            a += 1
            b += 1

        # down and left
        a = x + 1
        b = y - 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a+1][b-1][0] == "w":
                    potential_moves.append([[a+1], [b-1]])
            except IndexError:
                pass
            a += 1
            b -= 1

        # up and right
        a = x - 1
        b = y + 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a-1][b+1][0] == "w":
                    potential_moves.append([[a-1], [b+1]])
            except IndexError:
                pass
            a -= 1
            b += 1

        # up and left
        a = x - 1
        b = y - 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a-1][b-1][0] == "w":
                    potential_moves.append([[a-1], [b-1]])
            except IndexError:
                pass
            a -= 1
            b -= 1

        # down
        a = x + 1
        b = y
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a+1][b][0] == "w":
                    potential_moves.append([[a+1], [b]])
            except IndexError:
                pass
            a += 1

        # left
        a = x
        b = y - 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a][b-1][0] == "w":
                    potential_moves.append([[a], [b-1]])
            except IndexError:
                pass
            b -= 1

        # up
        a = x - 1
        b = y
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a-1][b][0] == "w":
                    potential_moves.append([[a-1], [b]])
            except IndexError:
                pass
            a -= 1

        # right
        a = x
        b = y + 1
        while (7 > a >= 0 and 7 > b >= 0) and (board[a][b] == ""):
            potential_moves.append([[a], [b]])
            try:
                if board[a][b+1][0] == "w":
                    potential_moves.append([[a], [b+1]])
            except IndexError:
                pass
            b += 1

# ------------------------------------------------------------------------------

    elif board[x][y] == "bKing":

        potential_moves.append([[x+1], [y]])
        potential_moves.append([[x+1], [y+1]])
        potential_moves.append([[x], [y+1]])
        potential_moves.append([[x-1], [y+1]])
        potential_moves.append([[x-1], [y]])
        potential_moves.append([[x-1], [y-1]])
        potential_moves.append([[x], [y-1]])
        potential_moves.append([[x+1], [y-1]])

# ------------------------------------------------------------------------------

    moves = append_strip_negatives(potential_moves)
    return moves
#this code was run by Medha Vaid 

 